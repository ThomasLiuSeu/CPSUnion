// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: click.proto

#ifndef PROTOBUF_click_2eproto__INCLUDED
#define PROTOBUF_click_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace RTB5 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_click_2eproto();
void protobuf_AssignDesc_click_2eproto();
void protobuf_ShutdownFile_click_2eproto();

class Click;
class ClickRequest;
class ClickResponse;

// ===================================================================

class ClickRequest : public ::google::protobuf::Message {
 public:
  ClickRequest();
  virtual ~ClickRequest();

  ClickRequest(const ClickRequest& from);

  inline ClickRequest& operator=(const ClickRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClickRequest& default_instance();

  void Swap(ClickRequest* other);

  // implements Message ----------------------------------------------

  inline ClickRequest* New() const { return New(NULL); }

  ClickRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClickRequest& from);
  void MergeFrom(const ClickRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClickRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // optional string tags = 2;
  void clear_tags();
  static const int kTagsFieldNumber = 2;
  const ::std::string& tags() const;
  void set_tags(const ::std::string& value);
  void set_tags(const char* value);
  void set_tags(const char* value, size_t size);
  ::std::string* mutable_tags();
  ::std::string* release_tags();
  void set_allocated_tags(::std::string* tags);

  // optional string origin_url = 3;
  void clear_origin_url();
  static const int kOriginUrlFieldNumber = 3;
  const ::std::string& origin_url() const;
  void set_origin_url(const ::std::string& value);
  void set_origin_url(const char* value);
  void set_origin_url(const char* value, size_t size);
  ::std::string* mutable_origin_url();
  ::std::string* release_origin_url();
  void set_allocated_origin_url(::std::string* origin_url);

  // @@protoc_insertion_point(class_scope:RTB5.ClickRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::internal::ArenaStringPtr tags_;
  ::google::protobuf::internal::ArenaStringPtr origin_url_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_click_2eproto();
  friend void protobuf_AssignDesc_click_2eproto();
  friend void protobuf_ShutdownFile_click_2eproto();

  void InitAsDefaultInstance();
  static ClickRequest* default_instance_;
};
// -------------------------------------------------------------------

class ClickResponse : public ::google::protobuf::Message {
 public:
  ClickResponse();
  virtual ~ClickResponse();

  ClickResponse(const ClickResponse& from);

  inline ClickResponse& operator=(const ClickResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClickResponse& default_instance();

  void Swap(ClickResponse* other);

  // implements Message ----------------------------------------------

  inline ClickResponse* New() const { return New(NULL); }

  ClickResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClickResponse& from);
  void MergeFrom(const ClickResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClickResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string second_jump_url = 1;
  void clear_second_jump_url();
  static const int kSecondJumpUrlFieldNumber = 1;
  const ::std::string& second_jump_url() const;
  void set_second_jump_url(const ::std::string& value);
  void set_second_jump_url(const char* value);
  void set_second_jump_url(const char* value, size_t size);
  ::std::string* mutable_second_jump_url();
  ::std::string* release_second_jump_url();
  void set_allocated_second_jump_url(::std::string* second_jump_url);

  // @@protoc_insertion_point(class_scope:RTB5.ClickResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr second_jump_url_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_click_2eproto();
  friend void protobuf_AssignDesc_click_2eproto();
  friend void protobuf_ShutdownFile_click_2eproto();

  void InitAsDefaultInstance();
  static ClickResponse* default_instance_;
};
// -------------------------------------------------------------------

class Click : public ::google::protobuf::Message {
 public:
  Click();
  virtual ~Click();

  Click(const Click& from);

  inline Click& operator=(const Click& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Click& default_instance();

  void Swap(Click* other);

  // implements Message ----------------------------------------------

  inline Click* New() const { return New(NULL); }

  Click* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Click& from);
  void MergeFrom(const Click& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Click* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 click_id = 1;
  void clear_click_id();
  static const int kClickIdFieldNumber = 1;
  ::google::protobuf::uint64 click_id() const;
  void set_click_id(::google::protobuf::uint64 value);

  // optional uint64 union_id = 2;
  void clear_union_id();
  static const int kUnionIdFieldNumber = 2;
  ::google::protobuf::uint64 union_id() const;
  void set_union_id(::google::protobuf::uint64 value);

  // optional uint64 campaign_id = 3;
  void clear_campaign_id();
  static const int kCampaignIdFieldNumber = 3;
  ::google::protobuf::uint64 campaign_id() const;
  void set_campaign_id(::google::protobuf::uint64 value);

  // optional uint64 click_time = 4;
  void clear_click_time();
  static const int kClickTimeFieldNumber = 4;
  ::google::protobuf::uint64 click_time() const;
  void set_click_time(::google::protobuf::uint64 value);

  // optional string origin_url = 5;
  void clear_origin_url();
  static const int kOriginUrlFieldNumber = 5;
  const ::std::string& origin_url() const;
  void set_origin_url(const ::std::string& value);
  void set_origin_url(const char* value);
  void set_origin_url(const char* value, size_t size);
  ::std::string* mutable_origin_url();
  ::std::string* release_origin_url();
  void set_allocated_origin_url(::std::string* origin_url);

  // optional string second_jump_url = 6;
  void clear_second_jump_url();
  static const int kSecondJumpUrlFieldNumber = 6;
  const ::std::string& second_jump_url() const;
  void set_second_jump_url(const ::std::string& value);
  void set_second_jump_url(const char* value);
  void set_second_jump_url(const char* value, size_t size);
  ::std::string* mutable_second_jump_url();
  ::std::string* release_second_jump_url();
  void set_allocated_second_jump_url(::std::string* second_jump_url);

  // optional uint64 user_id = 7;
  void clear_user_id();
  static const int kUserIdFieldNumber = 7;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // optional string tags = 8;
  void clear_tags();
  static const int kTagsFieldNumber = 8;
  const ::std::string& tags() const;
  void set_tags(const ::std::string& value);
  void set_tags(const char* value);
  void set_tags(const char* value, size_t size);
  ::std::string* mutable_tags();
  ::std::string* release_tags();
  void set_allocated_tags(::std::string* tags);

  // optional string ip = 9;
  void clear_ip();
  static const int kIpFieldNumber = 9;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:RTB5.Click)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 click_id_;
  ::google::protobuf::uint64 union_id_;
  ::google::protobuf::uint64 campaign_id_;
  ::google::protobuf::uint64 click_time_;
  ::google::protobuf::internal::ArenaStringPtr origin_url_;
  ::google::protobuf::internal::ArenaStringPtr second_jump_url_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::internal::ArenaStringPtr tags_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_click_2eproto();
  friend void protobuf_AssignDesc_click_2eproto();
  friend void protobuf_ShutdownFile_click_2eproto();

  void InitAsDefaultInstance();
  static Click* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ClickRequest

// optional uint64 user_id = 1;
inline void ClickRequest::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ClickRequest::user_id() const {
  // @@protoc_insertion_point(field_get:RTB5.ClickRequest.user_id)
  return user_id_;
}
inline void ClickRequest::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:RTB5.ClickRequest.user_id)
}

// optional string tags = 2;
inline void ClickRequest::clear_tags() {
  tags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClickRequest::tags() const {
  // @@protoc_insertion_point(field_get:RTB5.ClickRequest.tags)
  return tags_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClickRequest::set_tags(const ::std::string& value) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RTB5.ClickRequest.tags)
}
inline void ClickRequest::set_tags(const char* value) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RTB5.ClickRequest.tags)
}
inline void ClickRequest::set_tags(const char* value, size_t size) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RTB5.ClickRequest.tags)
}
inline ::std::string* ClickRequest::mutable_tags() {
  
  // @@protoc_insertion_point(field_mutable:RTB5.ClickRequest.tags)
  return tags_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClickRequest::release_tags() {
  
  return tags_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClickRequest::set_allocated_tags(::std::string* tags) {
  if (tags != NULL) {
    
  } else {
    
  }
  tags_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tags);
  // @@protoc_insertion_point(field_set_allocated:RTB5.ClickRequest.tags)
}

// optional string origin_url = 3;
inline void ClickRequest::clear_origin_url() {
  origin_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClickRequest::origin_url() const {
  // @@protoc_insertion_point(field_get:RTB5.ClickRequest.origin_url)
  return origin_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClickRequest::set_origin_url(const ::std::string& value) {
  
  origin_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RTB5.ClickRequest.origin_url)
}
inline void ClickRequest::set_origin_url(const char* value) {
  
  origin_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RTB5.ClickRequest.origin_url)
}
inline void ClickRequest::set_origin_url(const char* value, size_t size) {
  
  origin_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RTB5.ClickRequest.origin_url)
}
inline ::std::string* ClickRequest::mutable_origin_url() {
  
  // @@protoc_insertion_point(field_mutable:RTB5.ClickRequest.origin_url)
  return origin_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClickRequest::release_origin_url() {
  
  return origin_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClickRequest::set_allocated_origin_url(::std::string* origin_url) {
  if (origin_url != NULL) {
    
  } else {
    
  }
  origin_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin_url);
  // @@protoc_insertion_point(field_set_allocated:RTB5.ClickRequest.origin_url)
}

// -------------------------------------------------------------------

// ClickResponse

// optional string second_jump_url = 1;
inline void ClickResponse::clear_second_jump_url() {
  second_jump_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClickResponse::second_jump_url() const {
  // @@protoc_insertion_point(field_get:RTB5.ClickResponse.second_jump_url)
  return second_jump_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClickResponse::set_second_jump_url(const ::std::string& value) {
  
  second_jump_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RTB5.ClickResponse.second_jump_url)
}
inline void ClickResponse::set_second_jump_url(const char* value) {
  
  second_jump_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RTB5.ClickResponse.second_jump_url)
}
inline void ClickResponse::set_second_jump_url(const char* value, size_t size) {
  
  second_jump_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RTB5.ClickResponse.second_jump_url)
}
inline ::std::string* ClickResponse::mutable_second_jump_url() {
  
  // @@protoc_insertion_point(field_mutable:RTB5.ClickResponse.second_jump_url)
  return second_jump_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClickResponse::release_second_jump_url() {
  
  return second_jump_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClickResponse::set_allocated_second_jump_url(::std::string* second_jump_url) {
  if (second_jump_url != NULL) {
    
  } else {
    
  }
  second_jump_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), second_jump_url);
  // @@protoc_insertion_point(field_set_allocated:RTB5.ClickResponse.second_jump_url)
}

// -------------------------------------------------------------------

// Click

// optional uint64 click_id = 1;
inline void Click::clear_click_id() {
  click_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Click::click_id() const {
  // @@protoc_insertion_point(field_get:RTB5.Click.click_id)
  return click_id_;
}
inline void Click::set_click_id(::google::protobuf::uint64 value) {
  
  click_id_ = value;
  // @@protoc_insertion_point(field_set:RTB5.Click.click_id)
}

// optional uint64 union_id = 2;
inline void Click::clear_union_id() {
  union_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Click::union_id() const {
  // @@protoc_insertion_point(field_get:RTB5.Click.union_id)
  return union_id_;
}
inline void Click::set_union_id(::google::protobuf::uint64 value) {
  
  union_id_ = value;
  // @@protoc_insertion_point(field_set:RTB5.Click.union_id)
}

// optional uint64 campaign_id = 3;
inline void Click::clear_campaign_id() {
  campaign_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Click::campaign_id() const {
  // @@protoc_insertion_point(field_get:RTB5.Click.campaign_id)
  return campaign_id_;
}
inline void Click::set_campaign_id(::google::protobuf::uint64 value) {
  
  campaign_id_ = value;
  // @@protoc_insertion_point(field_set:RTB5.Click.campaign_id)
}

// optional uint64 click_time = 4;
inline void Click::clear_click_time() {
  click_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Click::click_time() const {
  // @@protoc_insertion_point(field_get:RTB5.Click.click_time)
  return click_time_;
}
inline void Click::set_click_time(::google::protobuf::uint64 value) {
  
  click_time_ = value;
  // @@protoc_insertion_point(field_set:RTB5.Click.click_time)
}

// optional string origin_url = 5;
inline void Click::clear_origin_url() {
  origin_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Click::origin_url() const {
  // @@protoc_insertion_point(field_get:RTB5.Click.origin_url)
  return origin_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Click::set_origin_url(const ::std::string& value) {
  
  origin_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RTB5.Click.origin_url)
}
inline void Click::set_origin_url(const char* value) {
  
  origin_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RTB5.Click.origin_url)
}
inline void Click::set_origin_url(const char* value, size_t size) {
  
  origin_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RTB5.Click.origin_url)
}
inline ::std::string* Click::mutable_origin_url() {
  
  // @@protoc_insertion_point(field_mutable:RTB5.Click.origin_url)
  return origin_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Click::release_origin_url() {
  
  return origin_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Click::set_allocated_origin_url(::std::string* origin_url) {
  if (origin_url != NULL) {
    
  } else {
    
  }
  origin_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin_url);
  // @@protoc_insertion_point(field_set_allocated:RTB5.Click.origin_url)
}

// optional string second_jump_url = 6;
inline void Click::clear_second_jump_url() {
  second_jump_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Click::second_jump_url() const {
  // @@protoc_insertion_point(field_get:RTB5.Click.second_jump_url)
  return second_jump_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Click::set_second_jump_url(const ::std::string& value) {
  
  second_jump_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RTB5.Click.second_jump_url)
}
inline void Click::set_second_jump_url(const char* value) {
  
  second_jump_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RTB5.Click.second_jump_url)
}
inline void Click::set_second_jump_url(const char* value, size_t size) {
  
  second_jump_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RTB5.Click.second_jump_url)
}
inline ::std::string* Click::mutable_second_jump_url() {
  
  // @@protoc_insertion_point(field_mutable:RTB5.Click.second_jump_url)
  return second_jump_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Click::release_second_jump_url() {
  
  return second_jump_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Click::set_allocated_second_jump_url(::std::string* second_jump_url) {
  if (second_jump_url != NULL) {
    
  } else {
    
  }
  second_jump_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), second_jump_url);
  // @@protoc_insertion_point(field_set_allocated:RTB5.Click.second_jump_url)
}

// optional uint64 user_id = 7;
inline void Click::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Click::user_id() const {
  // @@protoc_insertion_point(field_get:RTB5.Click.user_id)
  return user_id_;
}
inline void Click::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:RTB5.Click.user_id)
}

// optional string tags = 8;
inline void Click::clear_tags() {
  tags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Click::tags() const {
  // @@protoc_insertion_point(field_get:RTB5.Click.tags)
  return tags_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Click::set_tags(const ::std::string& value) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RTB5.Click.tags)
}
inline void Click::set_tags(const char* value) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RTB5.Click.tags)
}
inline void Click::set_tags(const char* value, size_t size) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RTB5.Click.tags)
}
inline ::std::string* Click::mutable_tags() {
  
  // @@protoc_insertion_point(field_mutable:RTB5.Click.tags)
  return tags_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Click::release_tags() {
  
  return tags_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Click::set_allocated_tags(::std::string* tags) {
  if (tags != NULL) {
    
  } else {
    
  }
  tags_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tags);
  // @@protoc_insertion_point(field_set_allocated:RTB5.Click.tags)
}

// optional string ip = 9;
inline void Click::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Click::ip() const {
  // @@protoc_insertion_point(field_get:RTB5.Click.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Click::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RTB5.Click.ip)
}
inline void Click::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RTB5.Click.ip)
}
inline void Click::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RTB5.Click.ip)
}
inline ::std::string* Click::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:RTB5.Click.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Click::release_ip() {
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Click::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:RTB5.Click.ip)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RTB5

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_click_2eproto__INCLUDED
