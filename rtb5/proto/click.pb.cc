// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: click.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "click.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RTB5 {

namespace {

const ::google::protobuf::Descriptor* ClickRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClickRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClickResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClickResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Click_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Click_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_click_2eproto() {
  protobuf_AddDesc_click_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "click.proto");
  GOOGLE_CHECK(file != NULL);
  ClickRequest_descriptor_ = file->message_type(0);
  static const int ClickRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickRequest, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickRequest, origin_url_),
  };
  ClickRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClickRequest_descriptor_,
      ClickRequest::default_instance_,
      ClickRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClickRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickRequest, _is_default_instance_));
  ClickResponse_descriptor_ = file->message_type(1);
  static const int ClickResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickResponse, second_jump_url_),
  };
  ClickResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClickResponse_descriptor_,
      ClickResponse::default_instance_,
      ClickResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClickResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickResponse, _is_default_instance_));
  Click_descriptor_ = file->message_type(2);
  static const int Click_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Click, click_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Click, union_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Click, campaign_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Click, click_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Click, origin_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Click, second_jump_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Click, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Click, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Click, ip_),
  };
  Click_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Click_descriptor_,
      Click::default_instance_,
      Click_offsets_,
      -1,
      -1,
      -1,
      sizeof(Click),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Click, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Click, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_click_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClickRequest_descriptor_, &ClickRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClickResponse_descriptor_, &ClickResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Click_descriptor_, &Click::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_click_2eproto() {
  delete ClickRequest::default_instance_;
  delete ClickRequest_reflection_;
  delete ClickResponse::default_instance_;
  delete ClickResponse_reflection_;
  delete Click::default_instance_;
  delete Click_reflection_;
}

void protobuf_AddDesc_click_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013click.proto\022\004RTB5\"A\n\014ClickRequest\022\017\n\007u"
    "ser_id\030\001 \001(\004\022\014\n\004tags\030\002 \001(\t\022\022\n\norigin_url"
    "\030\003 \001(\t\"(\n\rClickResponse\022\027\n\017second_jump_u"
    "rl\030\001 \001(\t\"\254\001\n\005Click\022\020\n\010click_id\030\001 \001(\004\022\020\n\010"
    "union_id\030\002 \001(\004\022\023\n\013campaign_id\030\003 \001(\004\022\022\n\nc"
    "lick_time\030\004 \001(\004\022\022\n\norigin_url\030\005 \001(\t\022\027\n\017s"
    "econd_jump_url\030\006 \001(\t\022\017\n\007user_id\030\007 \001(\004\022\014\n"
    "\004tags\030\010 \001(\t\022\n\n\002ip\030\t \001(\t2D\n\014ClickService\022"
    "4\n\007Process\022\022.RTB5.ClickRequest\032\023.RTB5.Cl"
    "ickResponse\"\000b\006proto3", 381);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "click.proto", &protobuf_RegisterTypes);
  ClickRequest::default_instance_ = new ClickRequest();
  ClickResponse::default_instance_ = new ClickResponse();
  Click::default_instance_ = new Click();
  ClickRequest::default_instance_->InitAsDefaultInstance();
  ClickResponse::default_instance_->InitAsDefaultInstance();
  Click::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_click_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_click_2eproto {
  StaticDescriptorInitializer_click_2eproto() {
    protobuf_AddDesc_click_2eproto();
  }
} static_descriptor_initializer_click_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ClickRequest::kUserIdFieldNumber;
const int ClickRequest::kTagsFieldNumber;
const int ClickRequest::kOriginUrlFieldNumber;
#endif  // !_MSC_VER

ClickRequest::ClickRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTB5.ClickRequest)
}

void ClickRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ClickRequest::ClickRequest(const ClickRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RTB5.ClickRequest)
}

void ClickRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  tags_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ClickRequest::~ClickRequest() {
  // @@protoc_insertion_point(destructor:RTB5.ClickRequest)
  SharedDtor();
}

void ClickRequest::SharedDtor() {
  tags_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ClickRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClickRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClickRequest_descriptor_;
}

const ClickRequest& ClickRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_click_2eproto();
  return *default_instance_;
}

ClickRequest* ClickRequest::default_instance_ = NULL;

ClickRequest* ClickRequest::New(::google::protobuf::Arena* arena) const {
  ClickRequest* n = new ClickRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClickRequest::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  tags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClickRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RTB5.ClickRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tags;
        break;
      }

      // optional string tags = 2;
      case 2: {
        if (tag == 18) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags().data(), this->tags().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RTB5.ClickRequest.tags"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_origin_url;
        break;
      }

      // optional string origin_url = 3;
      case 3: {
        if (tag == 26) {
         parse_origin_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->origin_url().data(), this->origin_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RTB5.ClickRequest.origin_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RTB5.ClickRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RTB5.ClickRequest)
  return false;
#undef DO_
}

void ClickRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RTB5.ClickRequest)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string tags = 2;
  if (this->tags().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RTB5.ClickRequest.tags");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tags(), output);
  }

  // optional string origin_url = 3;
  if (this->origin_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->origin_url().data(), this->origin_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RTB5.ClickRequest.origin_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->origin_url(), output);
  }

  // @@protoc_insertion_point(serialize_end:RTB5.ClickRequest)
}

::google::protobuf::uint8* ClickRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTB5.ClickRequest)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string tags = 2;
  if (this->tags().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RTB5.ClickRequest.tags");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tags(), target);
  }

  // optional string origin_url = 3;
  if (this->origin_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->origin_url().data(), this->origin_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RTB5.ClickRequest.origin_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->origin_url(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:RTB5.ClickRequest)
  return target;
}

int ClickRequest::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional string tags = 2;
  if (this->tags().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tags());
  }

  // optional string origin_url = 3;
  if (this->origin_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->origin_url());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClickRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClickRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClickRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClickRequest::MergeFrom(const ClickRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.tags().size() > 0) {

    tags_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tags_);
  }
  if (from.origin_url().size() > 0) {

    origin_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_url_);
  }
}

void ClickRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClickRequest::CopyFrom(const ClickRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClickRequest::IsInitialized() const {

  return true;
}

void ClickRequest::Swap(ClickRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClickRequest::InternalSwap(ClickRequest* other) {
  std::swap(user_id_, other->user_id_);
  tags_.Swap(&other->tags_);
  origin_url_.Swap(&other->origin_url_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClickRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClickRequest_descriptor_;
  metadata.reflection = ClickRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClickRequest

// optional uint64 user_id = 1;
void ClickRequest::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 ClickRequest::user_id() const {
  // @@protoc_insertion_point(field_get:RTB5.ClickRequest.user_id)
  return user_id_;
}
 void ClickRequest::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:RTB5.ClickRequest.user_id)
}

// optional string tags = 2;
void ClickRequest::clear_tags() {
  tags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ClickRequest::tags() const {
  // @@protoc_insertion_point(field_get:RTB5.ClickRequest.tags)
  return tags_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClickRequest::set_tags(const ::std::string& value) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RTB5.ClickRequest.tags)
}
 void ClickRequest::set_tags(const char* value) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RTB5.ClickRequest.tags)
}
 void ClickRequest::set_tags(const char* value, size_t size) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RTB5.ClickRequest.tags)
}
 ::std::string* ClickRequest::mutable_tags() {
  
  // @@protoc_insertion_point(field_mutable:RTB5.ClickRequest.tags)
  return tags_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClickRequest::release_tags() {
  
  return tags_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClickRequest::set_allocated_tags(::std::string* tags) {
  if (tags != NULL) {
    
  } else {
    
  }
  tags_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tags);
  // @@protoc_insertion_point(field_set_allocated:RTB5.ClickRequest.tags)
}

// optional string origin_url = 3;
void ClickRequest::clear_origin_url() {
  origin_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ClickRequest::origin_url() const {
  // @@protoc_insertion_point(field_get:RTB5.ClickRequest.origin_url)
  return origin_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClickRequest::set_origin_url(const ::std::string& value) {
  
  origin_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RTB5.ClickRequest.origin_url)
}
 void ClickRequest::set_origin_url(const char* value) {
  
  origin_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RTB5.ClickRequest.origin_url)
}
 void ClickRequest::set_origin_url(const char* value, size_t size) {
  
  origin_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RTB5.ClickRequest.origin_url)
}
 ::std::string* ClickRequest::mutable_origin_url() {
  
  // @@protoc_insertion_point(field_mutable:RTB5.ClickRequest.origin_url)
  return origin_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClickRequest::release_origin_url() {
  
  return origin_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClickRequest::set_allocated_origin_url(::std::string* origin_url) {
  if (origin_url != NULL) {
    
  } else {
    
  }
  origin_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin_url);
  // @@protoc_insertion_point(field_set_allocated:RTB5.ClickRequest.origin_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ClickResponse::kSecondJumpUrlFieldNumber;
#endif  // !_MSC_VER

ClickResponse::ClickResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTB5.ClickResponse)
}

void ClickResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ClickResponse::ClickResponse(const ClickResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RTB5.ClickResponse)
}

void ClickResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  second_jump_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ClickResponse::~ClickResponse() {
  // @@protoc_insertion_point(destructor:RTB5.ClickResponse)
  SharedDtor();
}

void ClickResponse::SharedDtor() {
  second_jump_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ClickResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClickResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClickResponse_descriptor_;
}

const ClickResponse& ClickResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_click_2eproto();
  return *default_instance_;
}

ClickResponse* ClickResponse::default_instance_ = NULL;

ClickResponse* ClickResponse::New(::google::protobuf::Arena* arena) const {
  ClickResponse* n = new ClickResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClickResponse::Clear() {
  second_jump_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClickResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RTB5.ClickResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string second_jump_url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_second_jump_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->second_jump_url().data(), this->second_jump_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RTB5.ClickResponse.second_jump_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RTB5.ClickResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RTB5.ClickResponse)
  return false;
#undef DO_
}

void ClickResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RTB5.ClickResponse)
  // optional string second_jump_url = 1;
  if (this->second_jump_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->second_jump_url().data(), this->second_jump_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RTB5.ClickResponse.second_jump_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->second_jump_url(), output);
  }

  // @@protoc_insertion_point(serialize_end:RTB5.ClickResponse)
}

::google::protobuf::uint8* ClickResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTB5.ClickResponse)
  // optional string second_jump_url = 1;
  if (this->second_jump_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->second_jump_url().data(), this->second_jump_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RTB5.ClickResponse.second_jump_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->second_jump_url(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:RTB5.ClickResponse)
  return target;
}

int ClickResponse::ByteSize() const {
  int total_size = 0;

  // optional string second_jump_url = 1;
  if (this->second_jump_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->second_jump_url());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClickResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClickResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClickResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClickResponse::MergeFrom(const ClickResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.second_jump_url().size() > 0) {

    second_jump_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.second_jump_url_);
  }
}

void ClickResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClickResponse::CopyFrom(const ClickResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClickResponse::IsInitialized() const {

  return true;
}

void ClickResponse::Swap(ClickResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClickResponse::InternalSwap(ClickResponse* other) {
  second_jump_url_.Swap(&other->second_jump_url_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClickResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClickResponse_descriptor_;
  metadata.reflection = ClickResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClickResponse

// optional string second_jump_url = 1;
void ClickResponse::clear_second_jump_url() {
  second_jump_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ClickResponse::second_jump_url() const {
  // @@protoc_insertion_point(field_get:RTB5.ClickResponse.second_jump_url)
  return second_jump_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClickResponse::set_second_jump_url(const ::std::string& value) {
  
  second_jump_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RTB5.ClickResponse.second_jump_url)
}
 void ClickResponse::set_second_jump_url(const char* value) {
  
  second_jump_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RTB5.ClickResponse.second_jump_url)
}
 void ClickResponse::set_second_jump_url(const char* value, size_t size) {
  
  second_jump_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RTB5.ClickResponse.second_jump_url)
}
 ::std::string* ClickResponse::mutable_second_jump_url() {
  
  // @@protoc_insertion_point(field_mutable:RTB5.ClickResponse.second_jump_url)
  return second_jump_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClickResponse::release_second_jump_url() {
  
  return second_jump_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClickResponse::set_allocated_second_jump_url(::std::string* second_jump_url) {
  if (second_jump_url != NULL) {
    
  } else {
    
  }
  second_jump_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), second_jump_url);
  // @@protoc_insertion_point(field_set_allocated:RTB5.ClickResponse.second_jump_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Click::kClickIdFieldNumber;
const int Click::kUnionIdFieldNumber;
const int Click::kCampaignIdFieldNumber;
const int Click::kClickTimeFieldNumber;
const int Click::kOriginUrlFieldNumber;
const int Click::kSecondJumpUrlFieldNumber;
const int Click::kUserIdFieldNumber;
const int Click::kTagsFieldNumber;
const int Click::kIpFieldNumber;
#endif  // !_MSC_VER

Click::Click()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTB5.Click)
}

void Click::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Click::Click(const Click& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RTB5.Click)
}

void Click::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  click_id_ = GOOGLE_ULONGLONG(0);
  union_id_ = GOOGLE_ULONGLONG(0);
  campaign_id_ = GOOGLE_ULONGLONG(0);
  click_time_ = GOOGLE_ULONGLONG(0);
  origin_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  second_jump_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = GOOGLE_ULONGLONG(0);
  tags_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Click::~Click() {
  // @@protoc_insertion_point(destructor:RTB5.Click)
  SharedDtor();
}

void Click::SharedDtor() {
  origin_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  second_jump_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tags_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Click::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Click::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Click_descriptor_;
}

const Click& Click::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_click_2eproto();
  return *default_instance_;
}

Click* Click::default_instance_ = NULL;

Click* Click::New(::google::protobuf::Arena* arena) const {
  Click* n = new Click;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Click::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Click*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(click_id_, click_time_);
  origin_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  second_jump_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = GOOGLE_ULONGLONG(0);
  tags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Click::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RTB5.Click)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 click_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &click_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_union_id;
        break;
      }

      // optional uint64 union_id = 2;
      case 2: {
        if (tag == 16) {
         parse_union_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &union_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_campaign_id;
        break;
      }

      // optional uint64 campaign_id = 3;
      case 3: {
        if (tag == 24) {
         parse_campaign_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &campaign_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_click_time;
        break;
      }

      // optional uint64 click_time = 4;
      case 4: {
        if (tag == 32) {
         parse_click_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &click_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_origin_url;
        break;
      }

      // optional string origin_url = 5;
      case 5: {
        if (tag == 42) {
         parse_origin_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->origin_url().data(), this->origin_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RTB5.Click.origin_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_second_jump_url;
        break;
      }

      // optional string second_jump_url = 6;
      case 6: {
        if (tag == 50) {
         parse_second_jump_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_second_jump_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->second_jump_url().data(), this->second_jump_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RTB5.Click.second_jump_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 7;
      case 7: {
        if (tag == 56) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_tags;
        break;
      }

      // optional string tags = 8;
      case 8: {
        if (tag == 66) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags().data(), this->tags().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RTB5.Click.tags"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ip;
        break;
      }

      // optional string ip = 9;
      case 9: {
        if (tag == 74) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RTB5.Click.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RTB5.Click)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RTB5.Click)
  return false;
#undef DO_
}

void Click::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RTB5.Click)
  // optional uint64 click_id = 1;
  if (this->click_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->click_id(), output);
  }

  // optional uint64 union_id = 2;
  if (this->union_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->union_id(), output);
  }

  // optional uint64 campaign_id = 3;
  if (this->campaign_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->campaign_id(), output);
  }

  // optional uint64 click_time = 4;
  if (this->click_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->click_time(), output);
  }

  // optional string origin_url = 5;
  if (this->origin_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->origin_url().data(), this->origin_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RTB5.Click.origin_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->origin_url(), output);
  }

  // optional string second_jump_url = 6;
  if (this->second_jump_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->second_jump_url().data(), this->second_jump_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RTB5.Click.second_jump_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->second_jump_url(), output);
  }

  // optional uint64 user_id = 7;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->user_id(), output);
  }

  // optional string tags = 8;
  if (this->tags().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RTB5.Click.tags");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->tags(), output);
  }

  // optional string ip = 9;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RTB5.Click.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->ip(), output);
  }

  // @@protoc_insertion_point(serialize_end:RTB5.Click)
}

::google::protobuf::uint8* Click::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTB5.Click)
  // optional uint64 click_id = 1;
  if (this->click_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->click_id(), target);
  }

  // optional uint64 union_id = 2;
  if (this->union_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->union_id(), target);
  }

  // optional uint64 campaign_id = 3;
  if (this->campaign_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->campaign_id(), target);
  }

  // optional uint64 click_time = 4;
  if (this->click_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->click_time(), target);
  }

  // optional string origin_url = 5;
  if (this->origin_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->origin_url().data(), this->origin_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RTB5.Click.origin_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->origin_url(), target);
  }

  // optional string second_jump_url = 6;
  if (this->second_jump_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->second_jump_url().data(), this->second_jump_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RTB5.Click.second_jump_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->second_jump_url(), target);
  }

  // optional uint64 user_id = 7;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->user_id(), target);
  }

  // optional string tags = 8;
  if (this->tags().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RTB5.Click.tags");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->tags(), target);
  }

  // optional string ip = 9;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RTB5.Click.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ip(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:RTB5.Click)
  return target;
}

int Click::ByteSize() const {
  int total_size = 0;

  // optional uint64 click_id = 1;
  if (this->click_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->click_id());
  }

  // optional uint64 union_id = 2;
  if (this->union_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->union_id());
  }

  // optional uint64 campaign_id = 3;
  if (this->campaign_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->campaign_id());
  }

  // optional uint64 click_time = 4;
  if (this->click_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->click_time());
  }

  // optional string origin_url = 5;
  if (this->origin_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->origin_url());
  }

  // optional string second_jump_url = 6;
  if (this->second_jump_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->second_jump_url());
  }

  // optional uint64 user_id = 7;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional string tags = 8;
  if (this->tags().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tags());
  }

  // optional string ip = 9;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Click::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Click* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Click>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Click::MergeFrom(const Click& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.click_id() != 0) {
    set_click_id(from.click_id());
  }
  if (from.union_id() != 0) {
    set_union_id(from.union_id());
  }
  if (from.campaign_id() != 0) {
    set_campaign_id(from.campaign_id());
  }
  if (from.click_time() != 0) {
    set_click_time(from.click_time());
  }
  if (from.origin_url().size() > 0) {

    origin_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_url_);
  }
  if (from.second_jump_url().size() > 0) {

    second_jump_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.second_jump_url_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.tags().size() > 0) {

    tags_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tags_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
}

void Click::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Click::CopyFrom(const Click& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Click::IsInitialized() const {

  return true;
}

void Click::Swap(Click* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Click::InternalSwap(Click* other) {
  std::swap(click_id_, other->click_id_);
  std::swap(union_id_, other->union_id_);
  std::swap(campaign_id_, other->campaign_id_);
  std::swap(click_time_, other->click_time_);
  origin_url_.Swap(&other->origin_url_);
  second_jump_url_.Swap(&other->second_jump_url_);
  std::swap(user_id_, other->user_id_);
  tags_.Swap(&other->tags_);
  ip_.Swap(&other->ip_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Click::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Click_descriptor_;
  metadata.reflection = Click_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Click

// optional uint64 click_id = 1;
void Click::clear_click_id() {
  click_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Click::click_id() const {
  // @@protoc_insertion_point(field_get:RTB5.Click.click_id)
  return click_id_;
}
 void Click::set_click_id(::google::protobuf::uint64 value) {
  
  click_id_ = value;
  // @@protoc_insertion_point(field_set:RTB5.Click.click_id)
}

// optional uint64 union_id = 2;
void Click::clear_union_id() {
  union_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Click::union_id() const {
  // @@protoc_insertion_point(field_get:RTB5.Click.union_id)
  return union_id_;
}
 void Click::set_union_id(::google::protobuf::uint64 value) {
  
  union_id_ = value;
  // @@protoc_insertion_point(field_set:RTB5.Click.union_id)
}

// optional uint64 campaign_id = 3;
void Click::clear_campaign_id() {
  campaign_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Click::campaign_id() const {
  // @@protoc_insertion_point(field_get:RTB5.Click.campaign_id)
  return campaign_id_;
}
 void Click::set_campaign_id(::google::protobuf::uint64 value) {
  
  campaign_id_ = value;
  // @@protoc_insertion_point(field_set:RTB5.Click.campaign_id)
}

// optional uint64 click_time = 4;
void Click::clear_click_time() {
  click_time_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Click::click_time() const {
  // @@protoc_insertion_point(field_get:RTB5.Click.click_time)
  return click_time_;
}
 void Click::set_click_time(::google::protobuf::uint64 value) {
  
  click_time_ = value;
  // @@protoc_insertion_point(field_set:RTB5.Click.click_time)
}

// optional string origin_url = 5;
void Click::clear_origin_url() {
  origin_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Click::origin_url() const {
  // @@protoc_insertion_point(field_get:RTB5.Click.origin_url)
  return origin_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Click::set_origin_url(const ::std::string& value) {
  
  origin_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RTB5.Click.origin_url)
}
 void Click::set_origin_url(const char* value) {
  
  origin_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RTB5.Click.origin_url)
}
 void Click::set_origin_url(const char* value, size_t size) {
  
  origin_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RTB5.Click.origin_url)
}
 ::std::string* Click::mutable_origin_url() {
  
  // @@protoc_insertion_point(field_mutable:RTB5.Click.origin_url)
  return origin_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Click::release_origin_url() {
  
  return origin_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Click::set_allocated_origin_url(::std::string* origin_url) {
  if (origin_url != NULL) {
    
  } else {
    
  }
  origin_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin_url);
  // @@protoc_insertion_point(field_set_allocated:RTB5.Click.origin_url)
}

// optional string second_jump_url = 6;
void Click::clear_second_jump_url() {
  second_jump_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Click::second_jump_url() const {
  // @@protoc_insertion_point(field_get:RTB5.Click.second_jump_url)
  return second_jump_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Click::set_second_jump_url(const ::std::string& value) {
  
  second_jump_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RTB5.Click.second_jump_url)
}
 void Click::set_second_jump_url(const char* value) {
  
  second_jump_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RTB5.Click.second_jump_url)
}
 void Click::set_second_jump_url(const char* value, size_t size) {
  
  second_jump_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RTB5.Click.second_jump_url)
}
 ::std::string* Click::mutable_second_jump_url() {
  
  // @@protoc_insertion_point(field_mutable:RTB5.Click.second_jump_url)
  return second_jump_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Click::release_second_jump_url() {
  
  return second_jump_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Click::set_allocated_second_jump_url(::std::string* second_jump_url) {
  if (second_jump_url != NULL) {
    
  } else {
    
  }
  second_jump_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), second_jump_url);
  // @@protoc_insertion_point(field_set_allocated:RTB5.Click.second_jump_url)
}

// optional uint64 user_id = 7;
void Click::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Click::user_id() const {
  // @@protoc_insertion_point(field_get:RTB5.Click.user_id)
  return user_id_;
}
 void Click::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:RTB5.Click.user_id)
}

// optional string tags = 8;
void Click::clear_tags() {
  tags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Click::tags() const {
  // @@protoc_insertion_point(field_get:RTB5.Click.tags)
  return tags_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Click::set_tags(const ::std::string& value) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RTB5.Click.tags)
}
 void Click::set_tags(const char* value) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RTB5.Click.tags)
}
 void Click::set_tags(const char* value, size_t size) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RTB5.Click.tags)
}
 ::std::string* Click::mutable_tags() {
  
  // @@protoc_insertion_point(field_mutable:RTB5.Click.tags)
  return tags_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Click::release_tags() {
  
  return tags_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Click::set_allocated_tags(::std::string* tags) {
  if (tags != NULL) {
    
  } else {
    
  }
  tags_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tags);
  // @@protoc_insertion_point(field_set_allocated:RTB5.Click.tags)
}

// optional string ip = 9;
void Click::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Click::ip() const {
  // @@protoc_insertion_point(field_get:RTB5.Click.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Click::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RTB5.Click.ip)
}
 void Click::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RTB5.Click.ip)
}
 void Click::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RTB5.Click.ip)
}
 ::std::string* Click::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:RTB5.Click.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Click::release_ip() {
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Click::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:RTB5.Click.ip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace RTB5

// @@protoc_insertion_point(global_scope)
