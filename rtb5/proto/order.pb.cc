// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "order.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RTB5 {

namespace {

const ::google::protobuf::Descriptor* Order_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Order_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Order_CurrencyType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_order_2eproto() {
  protobuf_AddDesc_order_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "order.proto");
  GOOGLE_CHECK(file != NULL);
  Order_descriptor_ = file->message_type(0);
  static const int Order_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, trading_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, commission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, order_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, valid_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, currency_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, click_id_),
  };
  Order_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Order_descriptor_,
      Order::default_instance_,
      Order_offsets_,
      -1,
      -1,
      -1,
      sizeof(Order),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, _is_default_instance_));
  Order_CurrencyType_descriptor_ = Order_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_order_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Order_descriptor_, &Order::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_order_2eproto() {
  delete Order::default_instance_;
  delete Order_reflection_;
}

void protobuf_AddDesc_order_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013order.proto\022\004RTB5\"\342\001\n\005Order\022\020\n\010order_i"
    "d\030\001 \001(\004\022\016\n\006status\030\002 \001(\004\022\026\n\016trading_volum"
    "e\030\003 \001(\004\022\022\n\ncommission\030\004 \001(\004\022\022\n\norder_tim"
    "e\030\005 \001(\004\022\022\n\nvalid_time\030\006 \001(\004\022/\n\rcurrency_"
    "type\030\007 \001(\0162\030.RTB5.Order.CurrencyType\022\020\n\010"
    "click_id\030\010 \001(\004\" \n\014CurrencyType\022\007\n\003RMB\020\000\022"
    "\007\n\003USD\020\001b\006proto3", 256);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "order.proto", &protobuf_RegisterTypes);
  Order::default_instance_ = new Order();
  Order::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_order_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_order_2eproto {
  StaticDescriptorInitializer_order_2eproto() {
    protobuf_AddDesc_order_2eproto();
  }
} static_descriptor_initializer_order_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Order_CurrencyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Order_CurrencyType_descriptor_;
}
bool Order_CurrencyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Order_CurrencyType Order::RMB;
const Order_CurrencyType Order::USD;
const Order_CurrencyType Order::CurrencyType_MIN;
const Order_CurrencyType Order::CurrencyType_MAX;
const int Order::CurrencyType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Order::kOrderIdFieldNumber;
const int Order::kStatusFieldNumber;
const int Order::kTradingVolumeFieldNumber;
const int Order::kCommissionFieldNumber;
const int Order::kOrderTimeFieldNumber;
const int Order::kValidTimeFieldNumber;
const int Order::kCurrencyTypeFieldNumber;
const int Order::kClickIdFieldNumber;
#endif  // !_MSC_VER

Order::Order()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTB5.Order)
}

void Order::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Order::Order(const Order& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RTB5.Order)
}

void Order::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  order_id_ = GOOGLE_ULONGLONG(0);
  status_ = GOOGLE_ULONGLONG(0);
  trading_volume_ = GOOGLE_ULONGLONG(0);
  commission_ = GOOGLE_ULONGLONG(0);
  order_time_ = GOOGLE_ULONGLONG(0);
  valid_time_ = GOOGLE_ULONGLONG(0);
  currency_type_ = 0;
  click_id_ = GOOGLE_ULONGLONG(0);
}

Order::~Order() {
  // @@protoc_insertion_point(destructor:RTB5.Order)
  SharedDtor();
}

void Order::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Order::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Order::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Order_descriptor_;
}

const Order& Order::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_order_2eproto();
  return *default_instance_;
}

Order* Order::default_instance_ = NULL;

Order* Order::New(::google::protobuf::Arena* arena) const {
  Order* n = new Order;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Order::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Order*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(order_id_, currency_type_);

#undef ZR_HELPER_
#undef ZR_

}

bool Order::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RTB5.Order)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 order_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint64 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_trading_volume;
        break;
      }

      // optional uint64 trading_volume = 3;
      case 3: {
        if (tag == 24) {
         parse_trading_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trading_volume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_commission;
        break;
      }

      // optional uint64 commission = 4;
      case 4: {
        if (tag == 32) {
         parse_commission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commission_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_order_time;
        break;
      }

      // optional uint64 order_time = 5;
      case 5: {
        if (tag == 40) {
         parse_order_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_valid_time;
        break;
      }

      // optional uint64 valid_time = 6;
      case 6: {
        if (tag == 48) {
         parse_valid_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &valid_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_currency_type;
        break;
      }

      // optional .RTB5.Order.CurrencyType currency_type = 7;
      case 7: {
        if (tag == 56) {
         parse_currency_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_currency_type(static_cast< ::RTB5::Order_CurrencyType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_click_id;
        break;
      }

      // optional uint64 click_id = 8;
      case 8: {
        if (tag == 64) {
         parse_click_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &click_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RTB5.Order)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RTB5.Order)
  return false;
#undef DO_
}

void Order::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RTB5.Order)
  // optional uint64 order_id = 1;
  if (this->order_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->order_id(), output);
  }

  // optional uint64 status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->status(), output);
  }

  // optional uint64 trading_volume = 3;
  if (this->trading_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->trading_volume(), output);
  }

  // optional uint64 commission = 4;
  if (this->commission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->commission(), output);
  }

  // optional uint64 order_time = 5;
  if (this->order_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->order_time(), output);
  }

  // optional uint64 valid_time = 6;
  if (this->valid_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->valid_time(), output);
  }

  // optional .RTB5.Order.CurrencyType currency_type = 7;
  if (this->currency_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->currency_type(), output);
  }

  // optional uint64 click_id = 8;
  if (this->click_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->click_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:RTB5.Order)
}

::google::protobuf::uint8* Order::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTB5.Order)
  // optional uint64 order_id = 1;
  if (this->order_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->order_id(), target);
  }

  // optional uint64 status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->status(), target);
  }

  // optional uint64 trading_volume = 3;
  if (this->trading_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->trading_volume(), target);
  }

  // optional uint64 commission = 4;
  if (this->commission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->commission(), target);
  }

  // optional uint64 order_time = 5;
  if (this->order_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->order_time(), target);
  }

  // optional uint64 valid_time = 6;
  if (this->valid_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->valid_time(), target);
  }

  // optional .RTB5.Order.CurrencyType currency_type = 7;
  if (this->currency_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->currency_type(), target);
  }

  // optional uint64 click_id = 8;
  if (this->click_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->click_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:RTB5.Order)
  return target;
}

int Order::ByteSize() const {
  int total_size = 0;

  // optional uint64 order_id = 1;
  if (this->order_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->order_id());
  }

  // optional uint64 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->status());
  }

  // optional uint64 trading_volume = 3;
  if (this->trading_volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trading_volume());
  }

  // optional uint64 commission = 4;
  if (this->commission() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commission());
  }

  // optional uint64 order_time = 5;
  if (this->order_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->order_time());
  }

  // optional uint64 valid_time = 6;
  if (this->valid_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->valid_time());
  }

  // optional .RTB5.Order.CurrencyType currency_type = 7;
  if (this->currency_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->currency_type());
  }

  // optional uint64 click_id = 8;
  if (this->click_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->click_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Order::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Order* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Order>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.order_id() != 0) {
    set_order_id(from.order_id());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.trading_volume() != 0) {
    set_trading_volume(from.trading_volume());
  }
  if (from.commission() != 0) {
    set_commission(from.commission());
  }
  if (from.order_time() != 0) {
    set_order_time(from.order_time());
  }
  if (from.valid_time() != 0) {
    set_valid_time(from.valid_time());
  }
  if (from.currency_type() != 0) {
    set_currency_type(from.currency_type());
  }
  if (from.click_id() != 0) {
    set_click_id(from.click_id());
  }
}

void Order::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {

  return true;
}

void Order::Swap(Order* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Order::InternalSwap(Order* other) {
  std::swap(order_id_, other->order_id_);
  std::swap(status_, other->status_);
  std::swap(trading_volume_, other->trading_volume_);
  std::swap(commission_, other->commission_);
  std::swap(order_time_, other->order_time_);
  std::swap(valid_time_, other->valid_time_);
  std::swap(currency_type_, other->currency_type_);
  std::swap(click_id_, other->click_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Order::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Order_descriptor_;
  metadata.reflection = Order_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Order

// optional uint64 order_id = 1;
void Order::clear_order_id() {
  order_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Order::order_id() const {
  // @@protoc_insertion_point(field_get:RTB5.Order.order_id)
  return order_id_;
}
 void Order::set_order_id(::google::protobuf::uint64 value) {
  
  order_id_ = value;
  // @@protoc_insertion_point(field_set:RTB5.Order.order_id)
}

// optional uint64 status = 2;
void Order::clear_status() {
  status_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Order::status() const {
  // @@protoc_insertion_point(field_get:RTB5.Order.status)
  return status_;
}
 void Order::set_status(::google::protobuf::uint64 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:RTB5.Order.status)
}

// optional uint64 trading_volume = 3;
void Order::clear_trading_volume() {
  trading_volume_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Order::trading_volume() const {
  // @@protoc_insertion_point(field_get:RTB5.Order.trading_volume)
  return trading_volume_;
}
 void Order::set_trading_volume(::google::protobuf::uint64 value) {
  
  trading_volume_ = value;
  // @@protoc_insertion_point(field_set:RTB5.Order.trading_volume)
}

// optional uint64 commission = 4;
void Order::clear_commission() {
  commission_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Order::commission() const {
  // @@protoc_insertion_point(field_get:RTB5.Order.commission)
  return commission_;
}
 void Order::set_commission(::google::protobuf::uint64 value) {
  
  commission_ = value;
  // @@protoc_insertion_point(field_set:RTB5.Order.commission)
}

// optional uint64 order_time = 5;
void Order::clear_order_time() {
  order_time_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Order::order_time() const {
  // @@protoc_insertion_point(field_get:RTB5.Order.order_time)
  return order_time_;
}
 void Order::set_order_time(::google::protobuf::uint64 value) {
  
  order_time_ = value;
  // @@protoc_insertion_point(field_set:RTB5.Order.order_time)
}

// optional uint64 valid_time = 6;
void Order::clear_valid_time() {
  valid_time_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Order::valid_time() const {
  // @@protoc_insertion_point(field_get:RTB5.Order.valid_time)
  return valid_time_;
}
 void Order::set_valid_time(::google::protobuf::uint64 value) {
  
  valid_time_ = value;
  // @@protoc_insertion_point(field_set:RTB5.Order.valid_time)
}

// optional .RTB5.Order.CurrencyType currency_type = 7;
void Order::clear_currency_type() {
  currency_type_ = 0;
}
 ::RTB5::Order_CurrencyType Order::currency_type() const {
  // @@protoc_insertion_point(field_get:RTB5.Order.currency_type)
  return static_cast< ::RTB5::Order_CurrencyType >(currency_type_);
}
 void Order::set_currency_type(::RTB5::Order_CurrencyType value) {
  
  currency_type_ = value;
  // @@protoc_insertion_point(field_set:RTB5.Order.currency_type)
}

// optional uint64 click_id = 8;
void Order::clear_click_id() {
  click_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Order::click_id() const {
  // @@protoc_insertion_point(field_get:RTB5.Order.click_id)
  return click_id_;
}
 void Order::set_click_id(::google::protobuf::uint64 value) {
  
  click_id_ = value;
  // @@protoc_insertion_point(field_set:RTB5.Order.click_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace RTB5

// @@protoc_insertion_point(global_scope)
