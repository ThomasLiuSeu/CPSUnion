// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: click.proto

#include "click.pb.h"
#include "click.grpc.pb.h"

#include <grpc++/channel.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/async_stream.h>
#include <grpc++/support/sync_stream.h>
namespace RTB5 {

static const char* ClickService_method_names[] = {
  "/RTB5.ClickService/Process",
};

std::unique_ptr< ClickService::Stub> ClickService::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< ClickService::Stub> stub(new ClickService::Stub(channel));
  return stub;
}

ClickService::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_Process_(ClickService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClickService::Stub::Process(::grpc::ClientContext* context, const ::RTB5::ClickRequest& request, ::RTB5::ClickResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Process_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::RTB5::ClickResponse>* ClickService::Stub::AsyncProcessRaw(::grpc::ClientContext* context, const ::RTB5::ClickRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::RTB5::ClickResponse>(channel_.get(), cq, rpcmethod_Process_, context, request);
}

ClickService::AsyncService::AsyncService() : ::grpc::AsynchronousService(ClickService_method_names, 1) {}

ClickService::Service::~Service() {
  delete service_;
}

::grpc::Status ClickService::Service::Process(::grpc::ServerContext* context, const ::RTB5::ClickRequest* request, ::RTB5::ClickResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void ClickService::AsyncService::RequestProcess(::grpc::ServerContext* context, ::RTB5::ClickRequest* request, ::grpc::ServerAsyncResponseWriter< ::RTB5::ClickResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* ClickService::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      ClickService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ClickService::Service, ::RTB5::ClickRequest, ::RTB5::ClickResponse>(
          std::mem_fn(&ClickService::Service::Process), this)));
  return service_;
}


}  // namespace RTB5

