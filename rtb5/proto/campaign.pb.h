// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: campaign.proto

#ifndef PROTOBUF_campaign_2eproto__INCLUDED
#define PROTOBUF_campaign_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace RTB5 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_campaign_2eproto();
void protobuf_AssignDesc_campaign_2eproto();
void protobuf_ShutdownFile_campaign_2eproto();

class Campaign;

// ===================================================================

class Campaign : public ::google::protobuf::Message {
 public:
  Campaign();
  virtual ~Campaign();

  Campaign(const Campaign& from);

  inline Campaign& operator=(const Campaign& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Campaign& default_instance();

  void Swap(Campaign* other);

  // implements Message ----------------------------------------------

  inline Campaign* New() const { return New(NULL); }

  Campaign* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Campaign& from);
  void MergeFrom(const Campaign& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Campaign* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 campaign_id = 1;
  void clear_campaign_id();
  static const int kCampaignIdFieldNumber = 1;
  ::google::protobuf::uint64 campaign_id() const;
  void set_campaign_id(::google::protobuf::uint64 value);

  // optional uint64 union_id = 2;
  void clear_union_id();
  static const int kUnionIdFieldNumber = 2;
  ::google::protobuf::uint64 union_id() const;
  void set_union_id(::google::protobuf::uint64 value);

  // optional string campaign_name = 3;
  void clear_campaign_name();
  static const int kCampaignNameFieldNumber = 3;
  const ::std::string& campaign_name() const;
  void set_campaign_name(const ::std::string& value);
  void set_campaign_name(const char* value);
  void set_campaign_name(const char* value, size_t size);
  ::std::string* mutable_campaign_name();
  ::std::string* release_campaign_name();
  void set_allocated_campaign_name(::std::string* campaign_name);

  // optional string pattern = 4;
  void clear_pattern();
  static const int kPatternFieldNumber = 4;
  const ::std::string& pattern() const;
  void set_pattern(const ::std::string& value);
  void set_pattern(const char* value);
  void set_pattern(const char* value, size_t size);
  ::std::string* mutable_pattern();
  ::std::string* release_pattern();
  void set_allocated_pattern(::std::string* pattern);

  // optional double percent = 5;
  void clear_percent();
  static const int kPercentFieldNumber = 5;
  double percent() const;
  void set_percent(double value);

  // @@protoc_insertion_point(class_scope:RTB5.Campaign)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 campaign_id_;
  ::google::protobuf::uint64 union_id_;
  ::google::protobuf::internal::ArenaStringPtr campaign_name_;
  ::google::protobuf::internal::ArenaStringPtr pattern_;
  double percent_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_campaign_2eproto();
  friend void protobuf_AssignDesc_campaign_2eproto();
  friend void protobuf_ShutdownFile_campaign_2eproto();

  void InitAsDefaultInstance();
  static Campaign* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Campaign

// optional uint64 campaign_id = 1;
inline void Campaign::clear_campaign_id() {
  campaign_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Campaign::campaign_id() const {
  // @@protoc_insertion_point(field_get:RTB5.Campaign.campaign_id)
  return campaign_id_;
}
inline void Campaign::set_campaign_id(::google::protobuf::uint64 value) {
  
  campaign_id_ = value;
  // @@protoc_insertion_point(field_set:RTB5.Campaign.campaign_id)
}

// optional uint64 union_id = 2;
inline void Campaign::clear_union_id() {
  union_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Campaign::union_id() const {
  // @@protoc_insertion_point(field_get:RTB5.Campaign.union_id)
  return union_id_;
}
inline void Campaign::set_union_id(::google::protobuf::uint64 value) {
  
  union_id_ = value;
  // @@protoc_insertion_point(field_set:RTB5.Campaign.union_id)
}

// optional string campaign_name = 3;
inline void Campaign::clear_campaign_name() {
  campaign_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Campaign::campaign_name() const {
  // @@protoc_insertion_point(field_get:RTB5.Campaign.campaign_name)
  return campaign_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Campaign::set_campaign_name(const ::std::string& value) {
  
  campaign_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RTB5.Campaign.campaign_name)
}
inline void Campaign::set_campaign_name(const char* value) {
  
  campaign_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RTB5.Campaign.campaign_name)
}
inline void Campaign::set_campaign_name(const char* value, size_t size) {
  
  campaign_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RTB5.Campaign.campaign_name)
}
inline ::std::string* Campaign::mutable_campaign_name() {
  
  // @@protoc_insertion_point(field_mutable:RTB5.Campaign.campaign_name)
  return campaign_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Campaign::release_campaign_name() {
  
  return campaign_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Campaign::set_allocated_campaign_name(::std::string* campaign_name) {
  if (campaign_name != NULL) {
    
  } else {
    
  }
  campaign_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), campaign_name);
  // @@protoc_insertion_point(field_set_allocated:RTB5.Campaign.campaign_name)
}

// optional string pattern = 4;
inline void Campaign::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Campaign::pattern() const {
  // @@protoc_insertion_point(field_get:RTB5.Campaign.pattern)
  return pattern_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Campaign::set_pattern(const ::std::string& value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RTB5.Campaign.pattern)
}
inline void Campaign::set_pattern(const char* value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RTB5.Campaign.pattern)
}
inline void Campaign::set_pattern(const char* value, size_t size) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RTB5.Campaign.pattern)
}
inline ::std::string* Campaign::mutable_pattern() {
  
  // @@protoc_insertion_point(field_mutable:RTB5.Campaign.pattern)
  return pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Campaign::release_pattern() {
  
  return pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Campaign::set_allocated_pattern(::std::string* pattern) {
  if (pattern != NULL) {
    
  } else {
    
  }
  pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:RTB5.Campaign.pattern)
}

// optional double percent = 5;
inline void Campaign::clear_percent() {
  percent_ = 0;
}
inline double Campaign::percent() const {
  // @@protoc_insertion_point(field_get:RTB5.Campaign.percent)
  return percent_;
}
inline void Campaign::set_percent(double value) {
  
  percent_ = value;
  // @@protoc_insertion_point(field_set:RTB5.Campaign.percent)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace RTB5

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_campaign_2eproto__INCLUDED
